// Generated by CoffeeScript 1.7.1

/* 
JVox Demo Program

----
The MIT License (MIT)

Copyright (c) 2014 yvt

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 */

(function() {
  var CanvasImaging;

  CanvasImaging = (function() {
    function CanvasImaging() {
      this.pool = [];
    }

    CanvasImaging.prototype.getCanvas = function(width, height) {
      var c, idx, _i, _len, _ref;
      _ref = this.pool;
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        c = _ref[idx];
        if (!(c.width === width && c.height === height)) {
          continue;
        }
        this.pool.splice(idx, 1);
        return c;
      }
      c = document.createElement('canvas');
      c.width = width;
      c.height = height;
      return c;
    };

    CanvasImaging.prototype.returnCanvas = function(canvas) {
      this.pool.push(canvas);
    };

    CanvasImaging.prototype.makeOpaque = function(canvas, fillStyle) {
      var ctx, height, newCanvas, width;
      width = canvas.width;
      height = canvas.height;
      newCanvas = this.getCanvas(width, height);
      ctx = newCanvas.getContext('2d');
      ctx.fillStyle = fillStyle;
      ctx.fillRect(0, 0, width, height);
      ctx.drawImage(canvas, 0, 0);
      return newCanvas;
    };

    CanvasImaging.prototype.shrinkHalf = function(canvas) {
      var ctx, height, newCanvas, newHeight, newWidth, width;
      width = canvas.width;
      height = canvas.height;
      newWidth = (canvas.width + 1) >> 1;
      newHeight = (canvas.height + 1) >> 1;
      newCanvas = this.getCanvas(newWidth, newHeight);
      ctx = newCanvas.getContext('2d');
      ctx.drawImage(canvas, 0, 0, width, height, 0, 0, newWidth, newHeight);
      ctx.globalAlpha = 1 / 2;
      ctx.drawImage(canvas, 1, 0, width, height, 0, 0, newWidth, newHeight);
      ctx.globalAlpha = 1 / 3;
      ctx.drawImage(canvas, 0, 1, width, height, 0, 0, newWidth, newHeight);
      ctx.globalAlpha = 1 / 4;
      ctx.drawImage(canvas, 1, 1, width, height, 0, 0, newWidth, newHeight);
      ctx.globalAlpha = 1;
      return newCanvas;
    };

    CanvasImaging.prototype.convolute1D = function(canvas, kernel, center, vertical) {
      var ctx, height, i, newCanvas, sum, vl, width, _i, _len;
      width = canvas.width;
      height = canvas.height;
      newCanvas = this.getCanvas(width, height);
      ctx = newCanvas.getContext('2d');
      i = -center;
      sum = 0;
      for (_i = 0, _len = kernel.length; _i < _len; _i++) {
        vl = kernel[_i];
        sum += vl;
        ctx.globalAlpha = vl / sum;
        if (vertical) {
          ctx.drawImage(canvas, 0, i);
        } else {
          ctx.drawImage(canvas, i, 0);
        }
        ++i;
      }
      ctx.globalAlpha = 1;
      return newCanvas;
    };

    return CanvasImaging;

  })();

  $(function() {
    var backBuffer, backBuffer32, backBuffer8, cameraAngle, canvas, canvasHeight, canvasWidth, context, currentTouch, eyePos, field, frameNext, getTime, imaging, imgData, lastFrameTime, loadProgress, loadProgressSmoothed, map, maps, mouseX, mouseXSmoothed, mouseY, mouseYSmoothed, render, renderer, result, startMap, startTime, touchStartX, touchStartY, xhr;
    canvas = $('#canvas');
    context = canvas[0].getContext('2d');
    canvasWidth = canvas[0].width;
    canvasHeight = canvas[0].height;
    imgData = context.getImageData(0, 0, canvasWidth, canvasHeight);
    backBuffer = new ArrayBuffer(canvasWidth * canvasHeight * 4);
    backBuffer32 = new Int32Array(backBuffer);
    backBuffer8 = new Uint8Array(backBuffer);
    imaging = new CanvasImaging;
    field = null;
    renderer = null;
    cameraAngle = 0;
    eyePos = {
      x: 326,
      y: 256,
      z: 55.2
    };
    getTime = function() {
      return new Date().getTime();
    };
    lastFrameTime = getTime();
    startTime = null;
    frameNext = function() {
      var dt, per, t, vel;
      t = getTime();
      dt = Math.min(t - lastFrameTime, 100) / 1000;
      if (renderer != null) {
        per = 1 - Math.pow(0.2, dt);
        mouseXSmoothed += (mouseX - mouseXSmoothed) * per;
        mouseYSmoothed += (mouseY - mouseYSmoothed) * per;
        vel = -mouseYSmoothed * dt * 40;
        eyePos.x += Math.sin(cameraAngle) * vel;
        eyePos.y += Math.cos(cameraAngle) * vel;
        cameraAngle -= mouseXSmoothed * dt * 3;
        eyePos.x = Math.max(Math.min(eyePos.x, 512 - 16), 16);
        eyePos.y = Math.max(Math.min(eyePos.y, 512 - 16), 16);
      } else {
        if (typeof loadProgress !== "undefined" && loadProgress !== null) {
          per = 1 - Math.pow(0.02, dt);
          loadProgressSmoothed += (loadProgress - loadProgressSmoothed) * per;
        }
      }
      return lastFrameTime = t;
    };
    render = function() {
      var alp, camera, canvasActualHeight, canvasActualWidth, center, gauss1, gauss2, gaussianKernel, half1, half2, half3, opq, prgH, prgW, prgX, prgY, ratio, spread, t, winHeight, winWidth, x, _i, _ref;
      frameNext();
      winWidth = $(window).width();
      winHeight = $(window).height();
      if (renderer != null) {
        canvasActualWidth = winWidth * 1.3;
        canvasActualHeight = winHeight * 1.3;
        camera = new JVox.PerspectiveCamera;
        camera.fovX = -80 * Math.PI / 180;
        ratio = canvasActualHeight / canvasActualWidth;
        camera.fovY = Math.atan(Math.tan(camera.fovX * -0.5) * ratio) * 2;
        camera.eye = {
          x: eyePos.x,
          y: eyePos.y,
          z: eyePos.z
        };
        camera.target = {
          x: 280,
          y: 350,
          z: 44.2
        };
        camera.eye.z += mouseYSmoothed * -0.2;
        camera.target.x = camera.eye.x + Math.sin(cameraAngle);
        camera.target.y = camera.eye.y + Math.cos(cameraAngle);
        renderer.render(backBuffer32, camera);
        imgData.data.set(backBuffer8, 0);
        context.putImageData(imgData, 0, 0);
        if (false) {
          opq = imaging.makeOpaque(canvas[0], map.fogColor);
          half1 = imaging.shrinkHalf(opq);
          imaging.returnCanvas(opq);
          half2 = imaging.shrinkHalf(half1);
          imaging.returnCanvas(half1);
          half3 = imaging.shrinkHalf(half2);
          imaging.returnCanvas(half2);
          gaussianKernel = [0.09242116269661459, 0.24137602468441252, 0.33240562523794576, 0.24137602468441252, 0.09242116269661459];
          gauss1 = imaging.convolute1D(half3, gaussianKernel, 2, false);
          imaging.returnCanvas(half3);
          gauss2 = imaging.convolute1D(gauss1, gaussianKernel, 2, true);
          imaging.returnCanvas(half1);
          context.globalAlpha = map.bloomAlpha;
          context.globalCompositeOperation = map.bloom;
          context.drawImage(gauss2, 0, 0, canvasWidth, canvasHeight);
          context.globalAlpha = 1;
          context.globalCompositeOperation = 'source-over';
          imaging.returnCanvas(gauss2);
        }
        t = (getTime() - startTime) / 2000;
        if (t < 1) {
          context.fillStyle = "rgba(0,0,0," + (1 - t) + ")";
          context.fillRect(0, 0, canvasWidth, canvasHeight);
        }
        return canvas.css({
          left: -canvasWidth * 0.5,
          top: -canvasHeight * 0.5,
          translate: "" + (winWidth * 0.5) + "," + (winHeight * 0.5),
          scale: "" + (canvasActualWidth / canvasWidth) + "," + (canvasActualHeight / canvasHeight),
          perspective: '1000px',
          rotate: -mouseXSmoothed * 10,
          rotateX: mouseYSmoothed * 20
        });
      } else {
        context.fillStyle = "black";
        context.fillRect(0, 0, canvasWidth, canvasHeight);
        prgW = 200;
        prgH = 3;
        prgX = (canvasWidth - prgW) >> 1;
        prgY = (canvasHeight - prgH) >> 1;
        context.fillStyle = '#333333';
        context.fillRect(prgX, prgY, prgW, prgH);
        if (typeof loadProgress !== "undefined" && loadProgress !== null) {
          context.fillStyle = '#777777';
          context.fillRect(prgX, prgY, prgW * loadProgressSmoothed, prgH);
        } else {
          t = getTime() / 1000;
          spread = 50;
          center = (t - Math.floor(t)) * (prgW + spread * 2) * 4 - spread;
          for (x = _i = 0, _ref = prgW - 2; _i <= _ref; x = _i += 2) {
            alp = (spread - Math.abs(x - center)) / spread;
            if (alp >= 0) {
              context.fillStyle = "rgba(120,120,120," + alp + ")";
              context.fillRect(prgX + x, prgY, 2, prgH);
            }
          }
        }
        canvas.css({
          left: (winWidth - canvasWidth) / 2,
          top: (winHeight - canvasHeight) / 2
        });
      }
    };
    mouseX = 0;
    mouseY = 0;
    mouseXSmoothed = 0;
    mouseYSmoothed = 0;
    $('#inputView').mousemove(function(e) {
      var pageH, pageW;
      pageW = $(window).width();
      pageH = $(window).height();
      mouseX = (e.pageX / pageW) - 0.5;
      mouseY = (e.pageY / pageH) - 0.5;
    });
    $('#inputView').mouseout(function(e) {
      mouseX = mouseY = 0;
    });
    $(window).blur(function(e) {
      mouseX = mouseY = 0;
    });
    currentTouch = null;
    touchStartX = null;
    touchStartY = null;
    $('html').bind('touchstart', function(e) {
      var evt;
      evt = e.originalEvent;
      evt.preventDefault();
      if (currentTouch != null) {
        return;
      }
      currentTouch = evt.changedTouches[0].identifier;
      touchStartX = evt.changedTouches[0].pageX;
      touchStartY = evt.changedTouches[0].pageY;
      mouseX = 0;
      mouseY = 0;
    });
    $('html').bind('touchmove', function(e) {
      var dx, dy, evt, sq, touch, _i, _len, _ref;
      evt = e.originalEvent;
      evt.preventDefault();
      if (currentTouch != null) {
        _ref = evt.touches;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          touch = _ref[_i];
          if (!(touch.identifier === currentTouch)) {
            continue;
          }
          dx = touch.pageX - touchStartX;
          dy = touch.pageY - touchStartY;
          dx /= 100;
          dy /= 100;
          sq = Math.sqrt(dx * dx + dy * dy);
          if (sq > 1) {
            dx /= sq;
            dy /= sq;
          } else {
            dx *= sq;
            dy *= sq;
          }
          mouseX = dx;
          mouseY = dy;
        }
      }
    });
    $('html').bind('touchend', function(e) {
      var evt, touch, _i, _len, _ref;
      evt = e.originalEvent;
      evt.preventDefault();
      if (currentTouch != null) {
        _ref = evt.changedTouches;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          touch = _ref[_i];
          if (!(touch.identifier === currentTouch)) {
            continue;
          }
          mouseX = 0;
          mouseY = 0;
          currentTouch = null;
        }
      }
    });
    $('html').bind('touchcancel', function(e) {
      var evt, touch, _i, _len, _ref;
      evt = e.originalEvent;
      evt.preventDefault();
      if (currentTouch != null) {
        _ref = evt.changedTouches;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          touch = _ref[_i];
          if (!(touch.identifier === currentTouch)) {
            continue;
          }
          mouseX = 0;
          mouseY = 0;
          currentTouch = null;
        }
      }
    });
    loadProgress = null;
    loadProgressSmoothed = 0;
    maps = {
      metropolis: {
        url: "Metropolis.vxl",
        message: '"Metropolis" by Ki11aWi11',
        fogColor: '#a0a8b8',
        z: 55.2,
        bloom: 'source-over',
        bloomAlpha: 0.3
      },
      spitfire: {
        url: "spitfire.vxl",
        message: '"Spitfire" by Lostmotel',
        fogColor: '#304070',
        z: 49.2,
        bloom: 'lighter',
        bloomAlpha: 0.3
      },
      mesa: {
        url: "mesa.vxl",
        message: '"Mesa" by Triplefox',
        fogColor: '#90c0f0',
        z: 38.2,
        bloom: 'lighter',
        bloomAlpha: 0.2
      }
    };
    map = maps["metropolis"];
    result = String(window.location).match(/\?([a-z]*)/);
    if ((result != null) && (maps[result[1]] != null)) {
      map = maps[result[1]];
    }
    xhr = new XMLHttpRequest();
    xhr.open('GET', map.url, true);
    xhr.responseType = 'arraybuffer';
    $('#copyView').text(map.message);
    $('#canvas').css('background-color', map.fogColor);
    eyePos.z = map.z;
    xhr.onprogress = function(e) {
      if (e.lengthComputable) {
        loadProgress = e.loaded / e.total;
      } else {
        loadProgress = null;
      }
    };
    xhr.onload = function(e) {
      var data;
      data = this.response;
      if (data == null) {
        alert("Invalid data.");
        return;
      }
      setTimeout((function() {
        return startMap(data);
      }), 1000);
    };
    startMap = function(data) {
      field = new JVox.VoxelField(data, 512, 512);
      renderer = new JVox.PseudoThreeDRenderer(field, canvasWidth, canvasHeight);
      $('#copyView').delay(2000).fadeTo(1000, 1);
      startTime = getTime();
    };
    setInterval(render, 0);
    xhr.send();
  });

}).call(this);
